"""
JSON G√∂r√ºnt√ºleyici Widget
etiketEkle.json ve dogtasCom.xlsx dosyalarƒ±nƒ± tablo ≈üeklinde kar≈üƒ±la≈ütƒ±ran mod√ºl
"""

import sys
import os
import json
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                             QLabel, QMessageBox, QHeaderView, QLineEdit,
                             QTableWidget, QTableWidgetItem, QApplication,
                             QMainWindow, QCheckBox, QTreeWidget, QTreeWidgetItem)
from PyQt5.QtGui import QFont, QColor, QBrush
import pandas as pd
from datetime import datetime


def get_base_dir():
    """Exe veya script dizinini d√∂nd√ºr"""
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    return os.path.dirname(os.path.abspath(__file__))


class PriceLoader:
    """Excel dosyasƒ±ndan fiyat verilerini y√ºkleyen sƒ±nƒ±f"""

    def __init__(self, excel_file):
        self.excel_file = excel_file
        self.price_data = {}
        self.load_prices()

    def load_prices(self):
        """Excel dosyasƒ±nƒ± y√ºkle ve SKU bazlƒ± fiyat s√∂zl√ºƒü√º olu≈ütur"""
        try:
            df = pd.read_excel(self.excel_file)
            # SKU'yu string'e √ßevir ve fiyat bilgilerini s√∂zl√ºƒüe aktar
            for _, row in df.iterrows():
                sku = str(row['sku'])
                self.price_data[sku] = {
                    'liste': float(row['LISTE']) if pd.notna(row['LISTE']) else 0.0,
                    'perakende': float(row['PERAKENDE']) if pd.notna(row['PERAKENDE']) else 0.0,
                    'kategori': str(row.get('kategori', '')),
                    'koleksiyon': str(row.get('KOLEKSIYON', ''))
                }
        except Exception as e:
            print(f"Excel y√ºkleme hatasƒ±: {e}")
            self.price_data = {}

    def get_price(self, sku):
        """SKU'ya g√∂re fiyat bilgisi d√∂nd√ºr"""
        sku_str = str(sku)
        return self.price_data.get(sku_str, {
            'liste': 0.0,
            'perakende': 0.0,
            'kategori': '',
            'koleksiyon': ''
        })


class JsonGosterWidget(QWidget):
    """JSON G√∂r√ºnt√ºleyici Widget - Ana pencereye embed edilebilir"""

    def __init__(self, parent=None):
        super().__init__(parent)

        # Dosya yollarƒ±
        base_dir = get_base_dir()
        self.json_file = os.path.join(base_dir, "etiketEkle.json")
        self.excel_file = os.path.join(base_dir, "dogtasCom.xlsx")
        self.json_data = None
        self.price_loader = None
        self.table_data = []  # T√ºm √ºr√ºn verilerini saklar
        self.koleksiyon_widgets = {}  # {(kategori, koleksiyon): {'sec': checkbox, 'exc': checkbox, 'sube': checkbox, 'has_price_diff': bool}}
        self.takim_widgets = {}  # {(kategori, koleksiyon, takim_adi): checkbox}

        # UI setup
        self.setup_ui()
        self.load_data()

    def setup_ui(self):
        """UI bile≈üenlerini olu≈ütur"""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(5, 5, 5, 5)
        main_layout.setSpacing(10)

        # Arama kutusu ve butonlar (tek satƒ±rda)
        search_layout = QHBoxLayout()

        search_label = QLabel("üîç Ara:")
        search_label.setStyleSheet("font-weight: bold; font-size: 12px;")
        search_layout.addWidget(search_label)

        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Kategori, Koleksiyon, SKU veya √úr√ºn Adƒ± ara...")
        self.search_box.setStyleSheet("""
            QLineEdit {
                font-size: 12px;
                padding: 6px;
                border-radius: 4px;
                border: 2px solid #3498db;
                max-width: 400px;
            }
        """)
        self.search_box.textChanged.connect(self.filter_table)
        search_layout.addWidget(self.search_box)

        search_layout.addStretch()

        # Temizle butonu
        clear_btn = QPushButton("‚úñ Temizle")
        clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #000000;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2a2a2a;
            }
        """)
        clear_btn.clicked.connect(lambda: self.search_box.clear())
        search_layout.addWidget(clear_btn)

        # Yenile butonu
        refresh_btn = QPushButton("üîÑ Yenile")
        refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #000000;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2a2a2a;
            }
        """)
        refresh_btn.clicked.connect(self.load_data)
        search_layout.addWidget(refresh_btn)

        # Koleksiyon Sil butonu
        delete_koleksiyon_btn = QPushButton("üóë Koleksiyon Sil")
        delete_koleksiyon_btn.setStyleSheet("""
            QPushButton {
                background-color: #000000;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2a2a2a;
            }
        """)
        delete_koleksiyon_btn.clicked.connect(self.delete_unselected_koleksiyonlar)
        search_layout.addWidget(delete_koleksiyon_btn)

        # Takƒ±m Sil butonu
        delete_takim_btn = QPushButton("üóë Takƒ±m Sil")
        delete_takim_btn.setStyleSheet("""
            QPushButton {
                background-color: #000000;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2a2a2a;
            }
        """)
        delete_takim_btn.clicked.connect(self.delete_selected_takimlar)
        search_layout.addWidget(delete_takim_btn)

        # Geni≈ület butonu (Sadece kategori ve koleksiyon)
        expand_partial_btn = QPushButton("‚¨á Geni≈ület")
        expand_partial_btn.setStyleSheet("""
            QPushButton {
                background-color: #000000;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2a2a2a;
            }
        """)
        expand_partial_btn.clicked.connect(self.expand_partial)
        search_layout.addWidget(expand_partial_btn)

        # T√ºm√ºn√º Geni≈ület butonu
        expand_all_btn = QPushButton("‚¨á‚¨á T√ºm√ºn√º Geni≈ület")
        expand_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #000000;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2a2a2a;
            }
        """)
        expand_all_btn.clicked.connect(self.expand_all)
        search_layout.addWidget(expand_all_btn)

        # Kaydet butonu
        save_btn = QPushButton("üíæ Kaydet")
        save_btn.setStyleSheet("""
            QPushButton {
                background-color: #000000;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2a2a2a;
            }
        """)
        save_btn.clicked.connect(self.save_data)
        search_layout.addWidget(save_btn)

        main_layout.addLayout(search_layout)

        # Ana Tree (Gruplandƒ±rƒ±lmƒ±≈ü Tablo)
        self.tree = QTreeWidget()
        self.tree.setStyleSheet("""
            QTreeWidget {
                font-size: 11px;
                border: 2px solid #bdc3c7;
                border-radius: 4px;
                background-color: white;
                gridline-color: #ecf0f1;
            }
            QTreeWidget::item {
                padding: 5px;
            }
            QHeaderView::section {
                background-color: #3498db;
                color: white;
                padding: 6px;
                border: 1px solid #2980b9;
                font-weight: bold;
                font-size: 11px;
            }
        """)

        # Tree kolonlarƒ±nƒ± ayarla
        self.tree.setColumnCount(13)
        self.tree.setHeaderLabels([
            "SE√á",
            "EXC",
            "SUBE",
            "Kategori / KOLEKSIYON",
            "Takƒ±m",
            "Miktar",
            "Malzeme Adƒ±",
            "LISTE",
            "PERAKENDE",
            "Fark",
            "LISTE_new",
            "PERAKENDE_new",
            "sku"
        ])

        main_layout.addWidget(self.tree)

        # Status label
        self.status_label = QLabel("Hazƒ±r")
        self.status_label.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                padding: 6px;
                background-color: #ecf0f1;
                border-top: 1px solid #bdc3c7;
                font-size: 11px;
                font-weight: bold;
                border-radius: 3px;
            }
        """)
        main_layout.addWidget(self.status_label)

    def load_data(self):
        """JSON ve Excel dosyalarƒ±nƒ± y√ºkle"""
        try:
            self.status_label.setText("üîÑ Veriler y√ºkleniyor...")
            QApplication.processEvents()

            # JSON dosyasƒ±nƒ± kontrol et
            if not os.path.exists(self.json_file):
                self.status_label.setText("‚ùå JSON dosyasƒ± bulunamadƒ±")
                QMessageBox.warning(self, "Uyarƒ±", f"JSON dosyasƒ± bulunamadƒ±:\n{self.json_file}")
                return

            # Excel dosyasƒ±nƒ± kontrol et
            if not os.path.exists(self.excel_file):
                self.status_label.setText("‚ùå Excel dosyasƒ± bulunamadƒ±")
                QMessageBox.warning(self, "Uyarƒ±", f"Excel dosyasƒ± bulunamadƒ±:\n{self.excel_file}")
                return

            # JSON dosyasƒ±nƒ± oku
            with open(self.json_file, 'r', encoding='utf-8') as f:
                self.json_data = json.load(f)

            # Excel fiyat verilerini y√ºkle
            self.price_loader = PriceLoader(self.excel_file)

            # Tablo verilerini hazƒ±rla
            self.prepare_table_data()

            # Tree'yi doldur (gruplandƒ±rƒ±lmƒ±≈ü)
            self.populate_tree()

            total_urunler = len(self.table_data)
            self.status_label.setText(f"‚úÖ Veriler y√ºklendi: {total_urunler} √ºr√ºn, {len(self.price_loader.price_data)} SKU")

        except Exception as e:
            error_msg = f"Veri y√ºkleme hatasƒ±: {str(e)}"
            self.status_label.setText(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "Hata", error_msg)

    def prepare_table_data(self):
        """JSON'dan t√ºm etiket_listesi ve takƒ±m verilerini √ßƒ±kar"""
        self.table_data = []
        self.takim_data = {}  # {kategori: {koleksiyon: {takim_adi: [products]}}}

        if not self.json_data:
            return

        # Her kategori i√ßin
        for kategori_adi, kategori_data in self.json_data.items():
            # Her koleksiyon i√ßin
            for koleksiyon_adi, koleksiyon_data in kategori_data.items():
                # Etiket listesini kontrol et
                if 'etiket_listesi' in koleksiyon_data:
                    etiket_listesi = koleksiyon_data['etiket_listesi']
                    urunler = etiket_listesi.get('urunler', [])

                    # Her √ºr√ºn i√ßin
                    for urun in urunler:
                        sku = str(urun.get('sku', ''))

                        # SKU filtreleme: 3 ile ba≈ülamalƒ± ve 10 haneli olmalƒ±
                        if not sku.startswith('3') or len(sku) != 10:
                            continue

                        urun_adi = urun.get('urun_adi_tam', '')
                        liste_fiyat = urun.get('liste_fiyat', 0.0)
                        perakende_fiyat = urun.get('perakende_fiyat', 0.0)

                        # Excel'den g√ºncel fiyatƒ± al
                        price_info = self.price_loader.get_price(sku) if self.price_loader else {
                            'liste': 0.0,
                            'perakende': 0.0,
                            'kategori': kategori_adi,
                            'koleksiyon': koleksiyon_adi
                        }

                        # Malzeme adƒ±: KOLEKSIYON + √úr√ºn Adƒ±
                        Malzeme_adi = f"{koleksiyon_adi} {urun_adi.replace(koleksiyon_adi, '').strip()}"

                        # Tabloya eklenecek satƒ±r verisi (etiket_listesi i√ßin)
                        row_data = {
                            'type': 'etiket_listesi',
                            'sku': sku,
                            'miktar': 1,
                            'urun_adi': urun_adi,
                            'Malzeme_adi': Malzeme_adi,
                            'liste': liste_fiyat,
                            'perakende': perakende_fiyat,
                            'kategori': kategori_adi,
                            'koleksiyon': koleksiyon_adi,
                            'liste_new': price_info['liste'],
                            'perakende_new': price_info['perakende']
                        }

                        self.table_data.append(row_data)

                # Takƒ±m verilerini topla
                if kategori_adi not in self.takim_data:
                    self.takim_data[kategori_adi] = {}
                if koleksiyon_adi not in self.takim_data[kategori_adi]:
                    self.takim_data[kategori_adi][koleksiyon_adi] = {}

                # Takƒ±mlarƒ± bul
                for key, value in koleksiyon_data.items():
                    if key != 'etiket_listesi' and isinstance(value, dict) and 'products' in value:
                        takim_adi = key
                        products = value.get('products', [])

                        # Takƒ±m √ºr√ºnlerini i≈üle
                        takim_urunler = []
                        for product in products:
                            product_sku = str(product.get('sku', ''))

                            # SKU filtreleme: 3 ile ba≈ülamalƒ± ve 10 haneli olmalƒ±
                            if not product_sku.startswith('3') or len(product_sku) != 10:
                                continue

                            product_miktar = product.get('miktar', 1)
                            urun_adi = product.get('urun_adi_tam', '')

                            # Excel'den g√ºncel fiyatƒ± al
                            price_info = self.price_loader.get_price(product_sku) if self.price_loader else {
                                'liste': 0.0,
                                'perakende': 0.0,
                                'kategori': kategori_adi,
                                'koleksiyon': koleksiyon_adi
                            }

                            # Malzeme adƒ±
                            Malzeme_adi = f"{koleksiyon_adi} {urun_adi.replace(koleksiyon_adi, '').strip()}"

                            # Takƒ±m √ºr√ºn√º verisi
                            takim_urun = {
                                'type': 'takim_urun',
                                'sku': product_sku,
                                'miktar': product_miktar,
                                'urun_adi': urun_adi,
                                'Malzeme_adi': Malzeme_adi,
                                'liste': 0.0,  # Takƒ±m √ºr√ºnlerinde liste fiyatƒ± yok
                                'perakende': 0.0,  # Takƒ±m √ºr√ºnlerinde perakende fiyatƒ± yok
                                'kategori': kategori_adi,
                                'koleksiyon': koleksiyon_adi,
                                'liste_new': price_info['liste'],
                                'perakende_new': price_info['perakende']
                            }

                            takim_urunler.append(takim_urun)

                        self.takim_data[kategori_adi][koleksiyon_adi][takim_adi] = takim_urunler

    def populate_tree(self, filter_text=""):
        """Tree'yi gruplandƒ±rƒ±lmƒ±≈ü ≈üekilde doldur (Kategori -> Koleksiyon -> Etiket Listesi + Takƒ±mlar)"""
        # Tree'yi temizle
        self.tree.clear()
        self.koleksiyon_widgets = {}  # Widget referanslarƒ±nƒ± sƒ±fƒ±rla
        self.takim_widgets = {}  # Takƒ±m widget referanslarƒ±nƒ± sƒ±fƒ±rla

        # Filtre uygula
        filtered_data = self.table_data
        if filter_text:
            filter_lower = filter_text.lower()
            filtered_data = [
                row for row in self.table_data
                if (filter_lower in row['kategori'].lower() or
                    filter_lower in row['koleksiyon'].lower() or
                    filter_lower in row['sku'].lower() or
                    filter_lower in row['urun_adi'].lower() or
                    filter_lower in row['Malzeme_adi'].lower())
            ]

        # Kategorilere g√∂re grupla
        from collections import defaultdict
        kategori_groups = defaultdict(lambda: defaultdict(list))

        for row_data in filtered_data:
            kategori = row_data['kategori']
            koleksiyon = row_data['koleksiyon']
            kategori_groups[kategori][koleksiyon].append(row_data)

        # Tree'ye ekle
        for kategori_adi in sorted(kategori_groups.keys()):
            # Kategori seviyesi
            kategori_item = QTreeWidgetItem(self.tree)
            kategori_item.setText(0, f"üìÇ {kategori_adi}")  # ƒ∞lk s√ºtuna yaz
            kategori_item.setExpanded(False)  # Ba≈ülangƒ±√ßta kapalƒ±

            # Kategori ba≈ülƒ±ƒüƒ±nƒ± bold yap
            font = QFont()
            font.setBold(True)
            font.setPointSize(10)
            kategori_item.setFont(0, font)

            # T√ºm kolonlara arka plan rengi ver
            for col in range(13):
                kategori_item.setBackground(col, QBrush(QColor("#ecf0f1")))

            # ƒ∞lk kolonu t√ºm s√ºtunlara yay (span) - doƒüru kullanƒ±m
            from PyQt5.QtCore import QModelIndex
            row_index = self.tree.indexOfTopLevelItem(kategori_item)
            self.tree.setFirstColumnSpanned(row_index, QModelIndex(), True)

            koleksiyonlar = kategori_groups[kategori_adi]

            for koleksiyon_adi in sorted(koleksiyonlar.keys()):
                # Koleksiyon seviyesi
                koleksiyon_item = QTreeWidgetItem(kategori_item)

                # Fiyat farkƒ± olup olmadƒ±ƒüƒ±nƒ± kontrol et
                urunler = koleksiyonlar[koleksiyon_adi]
                has_price_diff = False
                for row_data in urunler:
                    fark = abs(row_data['perakende_new'] - row_data['perakende'])
                    if fark > 7:
                        has_price_diff = True
                        break

                # JSON'dan mevcut deƒüerleri oku
                exc_deger = False
                sube_deger = False

                if (self.json_data and
                    kategori_adi in self.json_data and
                    koleksiyon_adi in self.json_data[kategori_adi]):

                    koleksiyon_data = self.json_data[kategori_adi][koleksiyon_adi]
                    if 'etiket_listesi' in koleksiyon_data and 'takim_sku' in koleksiyon_data['etiket_listesi']:
                        takim_sku = koleksiyon_data['etiket_listesi']['takim_sku']

                        # String deƒüerleri boolean'a √ßevir
                        exc_deger = takim_sku.get('excDeger', 'false').lower() == 'true'
                        sube_deger = takim_sku.get('subeDeger', 'false').lower() == 'true'

                # SE√á kolonu - Checkbox (varsayƒ±lan olarak HER ZAMAN se√ßili)
                sec_checkbox = QCheckBox()
                sec_checkbox.setChecked(True)  # Her zaman se√ßili
                sec_widget = QWidget()
                sec_layout = QHBoxLayout(sec_widget)
                sec_layout.addWidget(sec_checkbox)
                sec_layout.setAlignment(Qt.AlignCenter)
                sec_layout.setContentsMargins(0, 0, 0, 0)
                self.tree.setItemWidget(koleksiyon_item, 0, sec_widget)

                # EXC kolonu - Checkbox (JSON'dan gelen deƒüere g√∂re)
                exc_checkbox = QCheckBox()
                exc_checkbox.setChecked(exc_deger)  # JSON'dan oku
                exc_widget = QWidget()
                exc_layout = QHBoxLayout(exc_widget)
                exc_layout.addWidget(exc_checkbox)
                exc_layout.setAlignment(Qt.AlignCenter)
                exc_layout.setContentsMargins(0, 0, 0, 0)
                self.tree.setItemWidget(koleksiyon_item, 1, exc_widget)

                # SUBE kolonu - Checkbox (JSON'dan gelen deƒüere g√∂re)
                sube_checkbox = QCheckBox()
                sube_checkbox.setChecked(sube_deger)  # JSON'dan oku
                sube_widget = QWidget()
                sube_layout = QHBoxLayout(sube_widget)
                sube_layout.addWidget(sube_checkbox)
                sube_layout.setAlignment(Qt.AlignCenter)
                sube_layout.setContentsMargins(0, 0, 0, 0)
                self.tree.setItemWidget(koleksiyon_item, 2, sube_widget)

                # Widget referanslarƒ±nƒ± sakla
                self.koleksiyon_widgets[(kategori_adi, koleksiyon_adi)] = {
                    'sec': sec_checkbox,
                    'exc': exc_checkbox,
                    'sube': sube_checkbox,
                    'has_price_diff': has_price_diff
                }

                # Kategori / KOLEKSIYON kolonu
                koleksiyon_item.setText(3, f"üìÅ {koleksiyon_adi}")
                koleksiyon_item.setExpanded(False)  # Ba≈ülangƒ±√ßta kapalƒ±

                # Koleksiyon ba≈ülƒ±ƒüƒ±nƒ± bold yap
                font2 = QFont()
                font2.setBold(True)
                font2.setPointSize(9)
                koleksiyon_item.setFont(3, font2)

                # Fiyat farkƒ± varsa koleksiyon ba≈ülƒ±ƒüƒ±nƒ± kƒ±rmƒ±zƒ± yap
                if has_price_diff:
                    koleksiyon_item.setBackground(3, QBrush(QColor("#ffcccc")))
                else:
                    koleksiyon_item.setBackground(3, QBrush(QColor("#d5dbdb")))

                # Etiket listesi √ºr√ºnleri
                urunler = koleksiyonlar[koleksiyon_adi]
                for row_data in urunler:
                    # Fark hesaplama (satƒ±r renklendirme i√ßin)
                    fark = abs(row_data['perakende_new'] - row_data['perakende'])
                    satir_kirmizi = fark > 7

                    # √úr√ºn satƒ±rƒ±
                    urun_item = QTreeWidgetItem(koleksiyon_item)

                    # SE√á, EXC, SUBE, Kategori/KOLEKSIYON, Takƒ±m kolonlarƒ± bo≈ü
                    urun_item.setText(0, "")
                    urun_item.setText(1, "")
                    urun_item.setText(2, "")
                    urun_item.setText(3, "")
                    urun_item.setText(4, "")

                    # Miktar (etiket_listesi i√ßin bo≈ü - √ß√ºnk√º products[].miktar yok)
                    urun_item.setText(5, "")

                    # Malzeme Adƒ± - D√ºzenlenebilir
                    urun_item.setText(6, row_data['Malzeme_adi'])
                    urun_item.setFlags(urun_item.flags() | Qt.ItemIsEditable)

                    # LISTE (JSON - liste_fiyat)
                    urun_item.setText(7, f"{row_data['liste']:,.0f}")

                    # PERAKENDE (JSON - perakende_fiyat)
                    urun_item.setText(8, f"{row_data['perakende']:,.0f}")

                    # Fark
                    urun_item.setText(9, f"{fark:,.2f}")

                    # LISTE_new (Excel)
                    urun_item.setText(10, f"{row_data['liste_new']:,.0f}")

                    # PERAKENDE_new (Excel)
                    urun_item.setText(11, f"{row_data['perakende_new']:,.0f}")

                    # sku (EN SON)
                    urun_item.setText(12, row_data['sku'])

                    # Kƒ±rmƒ±zƒ± renklendirme
                    if satir_kirmizi:
                        for col in range(13):
                            urun_item.setBackground(col, QBrush(QColor("#ffcccc")))

                # Takƒ±mlarƒ± ekle (koleksiyon altƒ±nda)
                if kategori_adi in self.takim_data and koleksiyon_adi in self.takim_data[kategori_adi]:
                    takimlar = self.takim_data[kategori_adi][koleksiyon_adi]

                    for takim_adi in sorted(takimlar.keys()):
                        takim_urunler = takimlar[takim_adi]

                        if not takim_urunler:
                            continue

                        # Takƒ±m seviyesi (koleksiyon benzeri)
                        takim_item = QTreeWidgetItem(koleksiyon_item)

                        # Orijinal takƒ±m adƒ±nƒ± item'a kaydet (save sƒ±rasƒ±nda kullanmak i√ßin)
                        takim_item.setData(0, Qt.UserRole, {
                            'kategori': kategori_adi,
                            'koleksiyon': koleksiyon_adi,
                            'orijinal_takim_adi': takim_adi
                        })

                        # Takƒ±m checkbox'ƒ± ekle (varsayƒ±lan olarak i≈üaretsiz)
                        takim_checkbox = QCheckBox()
                        takim_checkbox.setChecked(False)  # Varsayƒ±lan olarak i≈üaretsiz
                        takim_checkbox_widget = QWidget()
                        takim_checkbox_layout = QHBoxLayout(takim_checkbox_widget)
                        takim_checkbox_layout.addWidget(takim_checkbox)
                        takim_checkbox_layout.setAlignment(Qt.AlignCenter)
                        takim_checkbox_layout.setContentsMargins(0, 0, 0, 0)
                        self.tree.setItemWidget(takim_item, 0, takim_checkbox_widget)

                        # Takƒ±m widget referansƒ±nƒ± sakla
                        self.takim_widgets[(kategori_adi, koleksiyon_adi, takim_adi)] = takim_checkbox

                        # Takƒ±m ba≈ülƒ±ƒüƒ± - "Takƒ±m" s√ºtunu hizasƒ±nda (kolon 4)
                        takim_item.setText(4, f"üìÅ {takim_adi}")
                        takim_item.setExpanded(False)  # Ba≈ülangƒ±√ßta kapalƒ±

                        # Takƒ±m adƒ±nƒ± d√ºzenlenebilir yap
                        takim_item.setFlags(takim_item.flags() | Qt.ItemIsEditable)

                        # Takƒ±m ba≈ülƒ±ƒüƒ±nƒ± bold ve koyu yap
                        font_takim = QFont()
                        font_takim.setBold(True)
                        font_takim.setPointSize(9)
                        takim_item.setFont(4, font_takim)

                        # T√ºm kolonlara arka plan rengi ver
                        for col in range(13):
                            takim_item.setBackground(col, QBrush(QColor("#d5dbdb")))

                        # Takƒ±m √ºr√ºnlerini ekle
                        for takim_urun in takim_urunler:
                            # Takƒ±m √ºr√ºn satƒ±rƒ±
                            takim_urun_item = QTreeWidgetItem(takim_item)

                            # SE√á, EXC, SUBE, Kategori/KOLEKSIYON, Takƒ±m kolonlarƒ± bo≈ü
                            takim_urun_item.setText(0, "")
                            takim_urun_item.setText(1, "")
                            takim_urun_item.setText(2, "")
                            takim_urun_item.setText(3, "")
                            takim_urun_item.setText(4, "")

                            # Miktar (products[].miktar) - D√ºzenlenebilir
                            takim_urun_item.setText(5, str(takim_urun['miktar']))
                            takim_urun_item.setFlags(takim_urun_item.flags() | Qt.ItemIsEditable)

                            # Malzeme Adƒ± (urun_adi_tam) - D√ºzenlenebilir
                            takim_urun_item.setText(6, takim_urun['Malzeme_adi'])
                            takim_urun_item.setFlags(takim_urun_item.flags() | Qt.ItemIsEditable)

                            # LISTE, PERAKENDE, Fark, LISTE_new, PERAKENDE_new (takƒ±m √ºr√ºnleri i√ßin bo≈ü)
                            takim_urun_item.setText(7, "")
                            takim_urun_item.setText(8, "")
                            takim_urun_item.setText(9, "")
                            takim_urun_item.setText(10, "")
                            takim_urun_item.setText(11, "")

                            # sku (EN SON)
                            takim_urun_item.setText(12, takim_urun['sku'])

        # S√ºtun geni≈üliklerini ayarla
        header = self.tree.header()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # SE√á

        # EXC s√ºtunu - Sabit geni≈ülik (Kategori metni geni≈üliƒüi etkilemesin)
        header.setSectionResizeMode(1, QHeaderView.Fixed)
        self.tree.setColumnWidth(1, 60)  # Sadece "EXC" geni≈üliƒüi kadar

        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # SUBE

        # Kategori/KOLEKSIYON s√ºtunu - Fixed geni≈ülik (aƒüa√ß yapƒ±sƒ± geni≈üliƒüi etkilemesin)
        header.setSectionResizeMode(3, QHeaderView.Interactive)  # Kategori / KOLEKSIYON
        self.tree.setColumnWidth(3, 200)  # Sabit geni≈ülik

        # Takƒ±m s√ºtunu - Dinamik geni≈ülik
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # Takƒ±m

        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # Miktar

        # Malzeme Adƒ± s√ºtunu - Dinamik geni≈ülik
        header.setSectionResizeMode(6, QHeaderView.Stretch)  # Malzeme Adƒ±

        header.setSectionResizeMode(7, QHeaderView.ResizeToContents)  # LISTE
        header.setSectionResizeMode(8, QHeaderView.ResizeToContents)  # PERAKENDE
        header.setSectionResizeMode(9, QHeaderView.ResizeToContents)  # Fark
        header.setSectionResizeMode(10, QHeaderView.ResizeToContents)  # LISTE_new
        header.setSectionResizeMode(11, QHeaderView.ResizeToContents)  # PERAKENDE_new
        header.setSectionResizeMode(12, QHeaderView.ResizeToContents)  # sku

    def filter_table(self, text):
        """Arama filtresini uygula"""
        self.populate_tree(text)

    def expand_partial(self):
        """Sadece kategorileri ve koleksiyonlarƒ± geni≈ület, √ºr√ºnleri deƒüil"""
        root = self.tree.invisibleRootItem()

        # T√ºm kategorileri geni≈ület
        for i in range(root.childCount()):
            kategori_item = root.child(i)
            kategori_item.setExpanded(True)

            # Her kategorinin altƒ±ndaki koleksiyonlarƒ± geni≈ület
            for j in range(kategori_item.childCount()):
                koleksiyon_item = kategori_item.child(j)
                koleksiyon_item.setExpanded(False)  # Koleksiyonlarƒ±n altƒ±ndaki √ºr√ºnler kapalƒ±

    def expand_all(self):
        """T√ºm kategorileri, koleksiyonlarƒ± ve √ºr√ºnleri geni≈ület"""
        self.tree.expandAll()

    def update_takim_data_from_tree(self, json_data):
        """Tree'deki takƒ±m g√ºncellemelerini JSON'a uygula"""
        try:
            # Deƒüi≈üen takƒ±m adlarƒ±nƒ± sakla
            degisen_takimlar = []

            # Tree'yi tara
            root = self.tree.invisibleRootItem()

            for i in range(root.childCount()):
                kategori_item = root.child(i)
                # Kategori adƒ±nƒ± al (üìÇ prefix'ini kaldƒ±r)
                kategori_text = kategori_item.text(0)
                kategori_adi = kategori_text.replace("üìÇ ", "").strip()

                for j in range(kategori_item.childCount()):
                    koleksiyon_item = kategori_item.child(j)
                    # Koleksiyon adƒ±nƒ± al (üìÅ prefix'ini kaldƒ±r)
                    koleksiyon_text = koleksiyon_item.text(3)
                    koleksiyon_adi = koleksiyon_text.replace("üìÅ ", "").strip()

                    # JSON'da bu kategori ve koleksiyon var mƒ±?
                    if kategori_adi not in json_data or koleksiyon_adi not in json_data[kategori_adi]:
                        continue

                    # Koleksiyon altƒ±ndaki item'leri tara
                    for k in range(koleksiyon_item.childCount()):
                        item = koleksiyon_item.child(k)

                        # Takƒ±m mƒ± kontrol et (kolon 4'te deƒüer varsa)
                        takim_text = item.text(4)
                        # Emoji ile ba≈ülayƒ±p ba≈ülamadƒ±ƒüƒ±na bakmadan, kolon 4'te metin varsa takƒ±m olarak kabul et
                        if takim_text and len(takim_text.strip()) > 0:
                            # Bu bir takƒ±m item'i - tree'deki g√ºncel ad
                            # Emoji varsa kaldƒ±r, yoksa olduƒüu gibi kullan
                            tree_takim_adi = takim_text.replace("üìÅ ", "").strip()

                            # Item'dan orijinal takƒ±m adƒ±nƒ± al
                            item_data = item.data(0, Qt.UserRole)

                            if not item_data or 'orijinal_takim_adi' not in item_data:
                                # Veri yoksa, tree'deki adƒ± kullan
                                eski_takim_adi = tree_takim_adi
                            else:
                                eski_takim_adi = item_data['orijinal_takim_adi']

                            # JSON'da bu takƒ±m var mƒ± kontrol et
                            if (kategori_adi not in json_data or
                                koleksiyon_adi not in json_data[kategori_adi] or
                                eski_takim_adi not in json_data[kategori_adi][koleksiyon_adi]):
                                continue

                            # Takƒ±m adƒ± deƒüi≈üti mi?
                            if eski_takim_adi != tree_takim_adi:
                                # Takƒ±m adƒ±nƒ± g√ºncelle (key deƒüi≈ütir)
                                takƒ±m_data = json_data[kategori_adi][koleksiyon_adi][eski_takim_adi]
                                json_data[kategori_adi][koleksiyon_adi][tree_takim_adi] = takƒ±m_data
                                del json_data[kategori_adi][koleksiyon_adi][eski_takim_adi]
                                guncel_takim_adi = tree_takim_adi

                                # Deƒüi≈üikliƒüi kaydet
                                degisen_takimlar.append({
                                    'koleksiyon': koleksiyon_adi,
                                    'eski_ad': eski_takim_adi,
                                    'yeni_ad': tree_takim_adi
                                })
                            else:
                                guncel_takim_adi = eski_takim_adi

                            # Takƒ±m √ºr√ºnlerini g√ºncelle
                            takim_data = json_data[kategori_adi][koleksiyon_adi][guncel_takim_adi]
                            if 'products' in takim_data:
                                products = takim_data['products']

                                # Tree'deki takƒ±m √ºr√ºnlerini al
                                for m in range(item.childCount()):
                                    urun_item = item.child(m)
                                    sku_text = urun_item.text(12)  # SKU kolonu
                                    miktar_text = urun_item.text(5)  # Miktar kolonu
                                    malzeme_adi_text = urun_item.text(6)  # Malzeme Adƒ± kolonu

                                    if not sku_text:
                                        continue

                                    # Bu SKU'yu products i√ßinde bul
                                    for product in products:
                                        if str(product.get('sku', '')) == sku_text:
                                            # Miktar g√ºncelle
                                            try:
                                                yeni_miktar = int(miktar_text) if miktar_text else 1
                                                if product.get('miktar', 1) != yeni_miktar:
                                                    product['miktar'] = yeni_miktar
                                            except ValueError:
                                                pass  # Ge√ßersiz miktar, deƒüi≈ütirme

                                            # Malzeme adƒ±nƒ± g√ºncelle (urun_adi_tam)
                                            if malzeme_adi_text:
                                                if product.get('urun_adi_tam', '') != malzeme_adi_text.strip():
                                                    product['urun_adi_tam'] = malzeme_adi_text.strip()
                                            break

                        else:
                            # Bu bir etiket listesi √ºr√ºn√º (takƒ±m deƒüil)
                            # SKU ve Malzeme Adƒ± var mƒ± kontrol et
                            sku_text = item.text(12)  # SKU kolonu
                            malzeme_adi_text = item.text(6)  # Malzeme Adƒ± kolonu

                            if not sku_text or not malzeme_adi_text:
                                continue

                            # JSON'da etiket_listesi > urunler i√ßinde bu SKU'yu bul ve g√ºncelle
                            koleksiyon_data = json_data[kategori_adi][koleksiyon_adi]
                            if 'etiket_listesi' in koleksiyon_data and 'urunler' in koleksiyon_data['etiket_listesi']:
                                urunler = koleksiyon_data['etiket_listesi']['urunler']
                                for urun in urunler:
                                    if str(urun.get('sku', '')) == sku_text:
                                        # Malzeme adƒ±nƒ± g√ºncelle (urun_adi_tam)
                                        if urun.get('urun_adi_tam') != malzeme_adi_text.strip():
                                            urun['urun_adi_tam'] = malzeme_adi_text.strip()
                                        break

            return degisen_takimlar

        except Exception as e:
            import traceback
            traceback.print_exc()
            return []

    def delete_selected_takimlar(self):
        """ƒ∞≈üaretlenmi≈ü takƒ±mlarƒ± JSON dosyasƒ±ndan sil"""
        try:
            # ƒ∞≈üaretlenmi≈ü takƒ±mlarƒ± bul
            selected_takimlar = []
            for (kategori_adi, koleksiyon_adi, takim_adi), checkbox in self.takim_widgets.items():
                if checkbox.isChecked():
                    selected_takimlar.append((kategori_adi, koleksiyon_adi, takim_adi))

            if not selected_takimlar:
                QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silmek istediƒüiniz takƒ±mlarƒ± i≈üaretleyin!")
                return

            # Kullanƒ±cƒ±ya onay sor
            takim_sayisi = len(selected_takimlar)
            mesaj = f"{takim_sayisi} takƒ±m silinecek. Emin misiniz?\n\n"
            mesaj += "\n".join([f"‚Ä¢ {k} > {kol} > {t}" for k, kol, t in selected_takimlar[:5]])
            if takim_sayisi > 5:
                mesaj += f"\n... ve {takim_sayisi - 5} takƒ±m daha"

            reply = QMessageBox.question(
                self,
                "Takƒ±m Silme Onayƒ±",
                mesaj,
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            if reply != QMessageBox.Yes:
                return

            self.status_label.setText("üóë Takƒ±mlar siliniyor...")
            QApplication.processEvents()

            # JSON dosyasƒ±nƒ± oku
            with open(self.json_file, 'r', encoding='utf-8') as f:
                json_data = json.load(f)

            # Se√ßili takƒ±mlarƒ± sil
            silinen_sayisi = 0
            for kategori_adi, koleksiyon_adi, takim_adi in selected_takimlar:
                if (kategori_adi in json_data and
                    koleksiyon_adi in json_data[kategori_adi] and
                    takim_adi in json_data[kategori_adi][koleksiyon_adi]):

                    # Takƒ±mƒ± sil
                    del json_data[kategori_adi][koleksiyon_adi][takim_adi]
                    silinen_sayisi += 1

            # JSON dosyasƒ±nƒ± kaydet
            with open(self.json_file, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, ensure_ascii=False, indent=2)

            self.status_label.setText(f"‚úÖ {silinen_sayisi} takƒ±m ba≈üarƒ±yla silindi")
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"{silinen_sayisi} takƒ±m ba≈üarƒ±yla silindi!")

            # Verileri yeniden y√ºkle
            self.load_data()

        except Exception as e:
            error_msg = f"Takƒ±m silme hatasƒ±: {str(e)}"
            self.status_label.setText(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "Hata", error_msg)

    def delete_unselected_koleksiyonlar(self):
        """SE√á checkbox'ƒ± i≈üaretli OLMAYAN koleksiyonlarƒ± JSON dosyasƒ±ndan sil"""
        try:
            # ƒ∞≈üaretli OLMAYAN koleksiyonlarƒ± bul
            unselected_koleksiyonlar = []
            for (kategori_adi, koleksiyon_adi), widgets in self.koleksiyon_widgets.items():
                if not widgets['sec'].isChecked():  # ƒ∞≈üaretli deƒüilse
                    unselected_koleksiyonlar.append((kategori_adi, koleksiyon_adi))

            if not unselected_koleksiyonlar:
                QMessageBox.warning(self, "Uyarƒ±", "T√ºm koleksiyonlar kullanƒ±mda (SE√á i≈üaretli)!\nSilmek i√ßin √∂nce SE√á i≈üaretini kaldƒ±rƒ±n.")
                return

            # Kullanƒ±cƒ±ya onay sor
            koleksiyon_sayisi = len(unselected_koleksiyonlar)
            mesaj = f"{koleksiyon_sayisi} koleksiyon (kullanƒ±lmayan) silinecek. Emin misiniz?\n\n"
            mesaj += "‚ö†Ô∏è Dƒ∞KKAT: Koleksiyona ait T√úM veriler (etiket listesi + takƒ±mlar) silinecek!\n\n"
            mesaj += "\n".join([f"‚Ä¢ {k} > {kol}" for k, kol in unselected_koleksiyonlar[:10]])
            if koleksiyon_sayisi > 10:
                mesaj += f"\n... ve {koleksiyon_sayisi - 10} koleksiyon daha"

            reply = QMessageBox.question(
                self,
                "Koleksiyon Silme Onayƒ±",
                mesaj,
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            if reply != QMessageBox.Yes:
                return

            self.status_label.setText("üóë Koleksiyonlar siliniyor...")
            QApplication.processEvents()

            # JSON dosyasƒ±nƒ± oku
            with open(self.json_file, 'r', encoding='utf-8') as f:
                json_data = json.load(f)

            # Se√ßili olmayan koleksiyonlarƒ± sil
            silinen_sayisi = 0
            for kategori_adi, koleksiyon_adi in unselected_koleksiyonlar:
                if (kategori_adi in json_data and
                    koleksiyon_adi in json_data[kategori_adi]):

                    # Koleksiyonu tamamen sil (etiket_listesi + t√ºm takƒ±mlar)
                    del json_data[kategori_adi][koleksiyon_adi]
                    silinen_sayisi += 1

                    # Eƒüer kategori bo≈ü kaldƒ±ysa kategoriyi de sil
                    if not json_data[kategori_adi]:
                        del json_data[kategori_adi]

            # JSON dosyasƒ±nƒ± kaydet
            with open(self.json_file, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, ensure_ascii=False, indent=2)

            self.status_label.setText(f"‚úÖ {silinen_sayisi} koleksiyon ba≈üarƒ±yla silindi")
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"{silinen_sayisi} koleksiyon ba≈üarƒ±yla silindi!")

            # Verileri yeniden y√ºkle
            self.load_data()

        except Exception as e:
            error_msg = f"Koleksiyon silme hatasƒ±: {str(e)}"
            self.status_label.setText(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "Hata", error_msg)

    def save_data(self):
        """JSON dosyasƒ±nƒ± radio buton durumlarƒ±na ve yeni fiyatlara g√∂re g√ºncelle"""
        try:
            self.status_label.setText("üíæ Veriler kaydediliyor...")
            QApplication.processEvents()

            # Mevcut d√ºzenlemeyi tamamla (pending edits)
            # Kullanƒ±cƒ± bir h√ºcreyi d√ºzenlerken kaydet basarsa, o d√ºzenlemeyi commit et
            current_item = self.tree.currentItem()
            if current_item:
                current_column = self.tree.currentColumn()
                if current_column >= 0:
                    # D√ºzenleme modundaysa kapat
                    self.tree.closePersistentEditor(current_item, current_column)

            # Tree'nin focus'unu kaldƒ±r (t√ºm pending deƒüi≈üiklikleri commit eder)
            self.tree.clearFocus()
            QApplication.processEvents()

            # JSON dosyasƒ±nƒ± oku
            with open(self.json_file, 'r', encoding='utf-8') as f:
                json_data = json.load(f)

            # ≈ûu anki tarih-saat
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # Her kategori ve koleksiyon i√ßin
            for (kategori_adi, koleksiyon_adi), widgets in self.koleksiyon_widgets.items():
                # Checkbox durumlarƒ±nƒ± al
                sec_checked = widgets['sec'].isChecked()
                exc_checked = widgets['exc'].isChecked()
                sube_checked = widgets['sube'].isChecked()

                # JSON'daki ilgili koleksiyona eri≈ü
                if kategori_adi not in json_data:
                    continue
                if koleksiyon_adi not in json_data[kategori_adi]:
                    continue

                koleksiyon_data = json_data[kategori_adi][koleksiyon_adi]

                # etiket_listesi > takim_sku altƒ±na secDeger, excDeger, subeDeger ekle/g√ºncelle
                if 'etiket_listesi' in koleksiyon_data and 'takim_sku' in koleksiyon_data['etiket_listesi']:
                    takim_sku = koleksiyon_data['etiket_listesi']['takim_sku']
                    takim_sku['secDeger'] = "true" if sec_checked else "false"
                    takim_sku['excDeger'] = "true" if exc_checked else "false"
                    takim_sku['subeDeger'] = "true" if sube_checked else "false"

                    # Fiyat g√ºncellemelerini yap (sadece SE√á i≈üaretli olanlar i√ßin ve fiyat farkƒ± varsa)
                    if sec_checked and widgets['has_price_diff']:
                        # etiket_listesi > urunler i√ßindeki SKU'larƒ± g√ºncelle
                        if 'urunler' in koleksiyon_data['etiket_listesi']:
                            urunler = koleksiyon_data['etiket_listesi']['urunler']
                            for urun in urunler:
                                sku = str(urun.get('sku', ''))
                                # Excel'den yeni fiyatlarƒ± al
                                price_info = self.price_loader.get_price(sku) if self.price_loader else None
                                if price_info:
                                    # Sadece mutlak deƒüer farkƒ± 7'den b√ºy√ºkse g√ºncelle
                                    old_perakende = urun.get('perakende_fiyat', 0.0)
                                    new_perakende = price_info['perakende']
                                    if abs(new_perakende - old_perakende) > 7:
                                        urun['liste_fiyat'] = price_info['liste']
                                        urun['perakende_fiyat'] = price_info['perakende']

                        # takim_sku fiyatlarƒ±nƒ± yeniden hesapla
                        total_liste = 0.0
                        total_perakende = 0.0
                        if 'urunler' in koleksiyon_data['etiket_listesi']:
                            for urun in koleksiyon_data['etiket_listesi']['urunler']:
                                total_liste += urun.get('liste_fiyat', 0.0)
                                total_perakende += urun.get('perakende_fiyat', 0.0)

                        takim_sku['liste_fiyat'] = round(total_liste, 2)
                        takim_sku['perakende_fiyat'] = round(total_perakende, 2)

                        # indirim_yuzde hesapla
                        if total_liste > 0:
                            indirim_yuzde = round(((total_liste - total_perakende) / total_liste) * 100)
                            takim_sku['indirim_yuzde'] = indirim_yuzde
                        else:
                            takim_sku['indirim_yuzde'] = 0

                        # updated_at g√ºncelle
                        takim_sku['updated_at'] = current_time

                # √ñzel takƒ±m adlarƒ±nƒ±n fiyatlarƒ±nƒ± g√ºncelle (SE√á i≈üaretli olanlar i√ßin ve fiyat farkƒ± varsa)
                if sec_checked and widgets['has_price_diff']:
                    # etiket_listesi dƒ±≈üƒ±ndaki t√ºm takƒ±mlarƒ± bul ve fiyatlarƒ±nƒ± g√ºncelle
                    for key, value in koleksiyon_data.items():
                        if key != 'etiket_listesi' and isinstance(value, dict) and 'products' in value:
                            # Bu bir √∂zel takƒ±m adƒ±
                            products = value.get('products', [])

                            # Takƒ±m i√ßin toplam fiyatlarƒ± hesapla
                            total_liste = 0.0
                            total_perakende = 0.0

                            for product in products:
                                product_sku = str(product.get('sku', ''))
                                product_miktar = product.get('miktar', 1)

                                # Excel'den yeni fiyatlarƒ± al
                                price_info = self.price_loader.get_price(product_sku) if self.price_loader else None
                                if price_info:
                                    # Fiyatlarƒ± miktar ile √ßarp ve topla
                                    total_liste += price_info['liste'] * product_miktar
                                    total_perakende += price_info['perakende'] * product_miktar

                            # Toplam fiyatlarƒ± g√ºncelle
                            value['total_liste_price'] = round(total_liste, 2)
                            value['total_perakende_price'] = round(total_perakende, 2)

                            # ƒ∞ndirim y√ºzdesini hesapla
                            if total_liste > 0:
                                indirim_yuzde = round(((total_liste - total_perakende) / total_liste) * 100)
                                value['total_indirim_yuzde'] = indirim_yuzde
                            else:
                                value['total_indirim_yuzde'] = 0

            # Takƒ±m g√ºncellemelerini yap (Takƒ±m adƒ±, Miktar, Malzeme Adƒ±)
            degisen_takimlar = self.update_takim_data_from_tree(json_data)

            # JSON dosyasƒ±nƒ± kaydet
            with open(self.json_file, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, ensure_ascii=False, indent=2)

            self.status_label.setText(f"‚úÖ Veriler ba≈üarƒ±yla kaydedildi: {current_time}")

            # Ba≈üarƒ± mesajƒ±
            mesaj = "Veriler ba≈üarƒ±yla kaydedildi!"

            # Deƒüi≈üen takƒ±mlar varsa g√∂ster
            if degisen_takimlar:
                mesaj += f"\n\nüìù Deƒüi≈üen Takƒ±m Adlarƒ± ({len(degisen_takimlar)}):\n\n"
                for dt in degisen_takimlar:
                    mesaj += f"‚ñ™ {dt['koleksiyon']}\n"
                    mesaj += f"  Eski: {dt['eski_ad']}\n"
                    mesaj += f"  Yeni: {dt['yeni_ad']}\n\n"

            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", mesaj)

            # Verileri yeniden y√ºkle
            self.load_data()

        except Exception as e:
            error_msg = f"Kaydetme hatasƒ±: {str(e)}"
            self.status_label.setText(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "Hata", error_msg)


def main():
    """Standalone test i√ßin"""
    app = QApplication(sys.argv)
    window = QMainWindow()
    window.setWindowTitle("JSON ve Excel Kar≈üƒ±la≈ütƒ±rma")
    window.setGeometry(100, 100, 1400, 800)

    widget = JsonGosterWidget()
    window.setCentralWidget(widget)
    window.show()

    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
